typedef object _;
_ sc_apply_ktx(sc* sc, _ k, _ fn, _ args);
_ sc_gc(sc* sc);
_ sc_interpreter_step(sc *sc, _ state);
_ sc_close_args(sc *sc, _ lst, _ E);
_ sc_fatal(sc *sc);
_ sc_post(sc* sc, _ o);
_ sc_write(sc *sc, _ o);
_ sc_newline(sc *sc);
_ sc_is_list(sc *sc, _ o);
_ sc_toplevel_macro(sc *sc);
_ sc_toplevel(sc *sc);
_ sc_bang_def_toplevel_macro(sc* sc, _ var, _ val);
_ sc_bang_def_toplevel(sc* sc, _ var, _ val);
_ sc_find_toplevel_macro(sc *sc, _ var);
_ sc_find_toplevel(sc *sc, _ var);
_ sc_env_set(sc *sc, _ E, _ var, _ value);
_ sc_find(sc *sc, _ E, _ var);
_ sc_find_slot(sc *sc, _ E, _ var);
_ sc_list_to_vector(sc *sc, _ lst);
_ sc_take_vector(sc *sc, _ n, _ in_lst);
_ sc_length(sc *sc, _ lst);
_ sc_reverse(sc *sc, _ lst);
_ sc_make_vector(sc *sc, _ slots, _ init);
_ sc_error(sc *sc, _ sym_o, _ arg_o);
_ sc_trap(sc *sc);
_ sc_cdr(sc *sc, _ o);
_ sc_car(sc *sc, _ o);
_ sc_make_k_ignore(sc *sc, _ P, _ V);
_ sc_make_k_macro(sc *sc, _ P, _ E);
_ sc_make_k_seq(sc *sc, _ P, _ T);
_ sc_make_k_set(sc *sc, _ P, _ V);
_ sc_make_k_if(sc *sc, _ P, _ Y, _ N);
_ sc_make_k_apply(sc *sc, _ P, _ D, _ T);
_ sc_make_error(sc *sc, _ T, _ A, _ K);
_ sc_make_ast(sc *sc, _ D);
_ sc_make_lambda(sc *sc, _ F, _ R, _ S);
_ sc_make_closure(sc *sc, _ T, _ E);
_ sc_make_state(sc *sc, _ C, _ K);
_ sc_cons(sc *sc, _ car, _ cdr);
_ sc_k_parent(sc *sc, _ o);
_ sc_is_k(sc *sc, _ o);
_ sc_is_k_ignore(sc *sc, _ o);
_ sc_is_k_macro(sc *sc, _ o);
_ sc_is_k_set(sc *sc, _ o);
_ sc_is_k_seq(sc *sc, _ o);
_ sc_is_k_apply(sc *sc, _ o);
_ sc_is_k_if(sc *sc, _ o);
_ sc_is_error(sc *sc, _ o);
_ sc_is_ast(sc *sc, _ o);
_ sc_is_state(sc *sc, _ o);
_ sc_is_closure(sc *sc, _ o);
_ sc_is_lambda(sc *sc, _ o);
_ sc_is_pair(sc *sc, _ o);
_ sc_is_vector(sc *sc, _ o);
_ sc_is_null(sc *sc, _ o);
_ sc_is_prim(sc *sc, _ o);
_ sc_is_symbol(sc *sc, _ o);
_ sc_is_integer(sc *sc, _ o);
static inline void _sc_def_prims(sc *sc){
    DEF("apply-ktx", sc_apply_ktx, 3);
    DEF("gc", sc_gc, 0);
    DEF("interpreter-step", sc_interpreter_step, 1);
    DEF("close-args", sc_close_args, 2);
    DEF("fatal", sc_fatal, 0);
    DEF("post", sc_post, 1);
    DEF("write", sc_write, 1);
    DEF("newline", sc_newline, 0);
    DEF("list?", sc_is_list, 1);
    DEF("toplevel-macro", sc_toplevel_macro, 0);
    DEF("toplevel", sc_toplevel, 0);
    DEF("def-toplevel-macro!", sc_bang_def_toplevel_macro, 2);
    DEF("def-toplevel!", sc_bang_def_toplevel, 2);
    DEF("find-toplevel-macro", sc_find_toplevel_macro, 1);
    DEF("find-toplevel", sc_find_toplevel, 1);
    DEF("env-set", sc_env_set, 3);
    DEF("find", sc_find, 2);
    DEF("find-slot", sc_find_slot, 2);
    DEF("list->vector", sc_list_to_vector, 1);
    DEF("take-vector", sc_take_vector, 2);
    DEF("length", sc_length, 1);
    DEF("reverse", sc_reverse, 1);
    DEF("make-vector", sc_make_vector, 2);
    DEF("error", sc_error, 2);
    DEF("trap", sc_trap, 0);
    DEF("cdr", sc_cdr, 1);
    DEF("car", sc_car, 1);
    DEF("make-k-ignore", sc_make_k_ignore, 2);
    DEF("make-k-macro", sc_make_k_macro, 2);
    DEF("make-k-seq", sc_make_k_seq, 2);
    DEF("make-k-set", sc_make_k_set, 2);
    DEF("make-k-if", sc_make_k_if, 3);
    DEF("make-k-apply", sc_make_k_apply, 3);
    DEF("make-error", sc_make_error, 3);
    DEF("make-ast", sc_make_ast, 1);
    DEF("make-lambda", sc_make_lambda, 3);
    DEF("make-closure", sc_make_closure, 2);
    DEF("make-state", sc_make_state, 2);
    DEF("cons", sc_cons, 2);
    DEF("k-parent", sc_k_parent, 1);
    DEF("k?", sc_is_k, 1);
    DEF("k-ignore?", sc_is_k_ignore, 1);
    DEF("k-macro?", sc_is_k_macro, 1);
    DEF("k-set?", sc_is_k_set, 1);
    DEF("k-seq?", sc_is_k_seq, 1);
    DEF("k-apply?", sc_is_k_apply, 1);
    DEF("k-if?", sc_is_k_if, 1);
    DEF("error?", sc_is_error, 1);
    DEF("ast?", sc_is_ast, 1);
    DEF("state?", sc_is_state, 1);
    DEF("closure?", sc_is_closure, 1);
    DEF("lambda?", sc_is_lambda, 1);
    DEF("pair?", sc_is_pair, 1);
    DEF("vector?", sc_is_vector, 1);
    DEF("null?", sc_is_null, 1);
    DEF("prim?", sc_is_prim, 1);
    DEF("symbol?", sc_is_symbol, 1);
    DEF("integer?", sc_is_integer, 1);
}
